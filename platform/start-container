#!/usr/bin/env bash
set -e

#source /platform/bash-exec

ENV_DIR="/etc/container_environment/"
mkdir -p $ENV_DIR

for oneshot in `ls /platform/start-container.d/`
do
    echo "executing start-up command /platform/start-container.d/$oneshot"
    /platform/start-container.d/$oneshot
    if [ $? -ne 0 ]; then
        exit $?
    fi
done

export SVDIR=/platform/services/
export SVWAIT=60

set -E
function shutdown () {
    # Disabling the traps to avoid a cascading
    #trap - SIGINT SIGILL SIGABRT SIGFPE SIGSEGV SIGTERM SIGBUS SIGCHLD SIGKILL ERR

    echo "waiting for all services to exit ..."
    DONE=0
    SLEEP_COUNT=0
    SLEEP_MAX=$SVWAIT
    # while [ $DONE -ne 1 ] && [ $SLEEP_COUNT -le $SLEEP_MAX ];
    # do
    #     for x in `ls /platform/services/`;
    #     do
    #         echo "Stopping service /platform/services/$x ..."
    #         sv quit $x
    #     done
    #     $(/usr/bin/sv status /platform/services/* | grep -q '^run:')
    #     DONE=$?
    #     echo "done is $DONE"
    #     if [ $DONE -eq 127 ]
    #     then
    #         exit 1
    #     fi
    #     SLEEP_COUNT+=1
    #     sleep 1
    # done
    # terminate all dumb-init processes
    echo "sending QUIT to all dumb-init processes"
    killall -QUIT dumb-init
    exit 0

    # terminate the runsv commands
    # for x in `ls /platform/services/`;
    # do
    #     echo "Stopping service /platform/services/$x ..."
    #     sv x $x
    # done

    if [ $SLEEP_COUNT -le $SLEEP_MAX ]
    then
        exit 1
    fi

exit 0
}
trap shutdown SIGTERM SIGQUIT SIGINT;

function sigterm_cleanup_post () {
    shutdown
    return 0
}
function trap_exec_failure () {
    shutdown
    return 0
}
# run any CMD passed in, otherwise, start container
if [ $# -gt 0 ]; then
  chpst -u www-data:www-data -e $ENV_DIR "$@"
else
	pids=()
	for x in `ls /platform/services/`;
	do
		echo "Staring service /platform/services/$x ..."
		#exec /usr/bin/runsv  /platform/services/$x & pids+=($!)
		/platform/services/$x/run &
		pids+=($!)
	done
	# some pids may have exited immediately because they are not needed.
	# unset pids that are already dead
	# TODO: make /platform/services dynamic at run time so we don't
	# TODO: have to allow some services to exit immediately
	pididx = 0
	for pid in ${pids[@]}; do
		if ! ps -p $pid > /dev/null; then
			unset 'pids[pididx]'
		fi
		(( ++pididx ))
		echo ${pids[@]}
	done

	echo "Waiting on pids ..."
		echo ${pids[@]}
		wait -n ${pids[@]}
		shutdown
	fi
